// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonD2b7633eDecodeDrhyuComIndexerModels(in *jlexer.Lexer, out *Stash) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "accountName":
			out.AccountName = string(in.String())
		case "id":
			out.ID = string(in.String())
		case "items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if out.Items == nil {
					if !in.IsDelim(']') {
						out.Items = make([]Item, 0, 0)
					} else {
						out.Items = []Item{}
					}
				} else {
					out.Items = (out.Items)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Item
					(v1).UnmarshalEasyJSON(in)
					out.Items = append(out.Items, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "lastCharacterName":
			out.LastCharacterName = string(in.String())
		case "league":
			out.League = string(in.String())
		case "public":
			out.Public = bool(in.Bool())
		case "stash":
			out.Stash = string(in.String())
		case "stashType":
			out.StashType = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeDrhyuComIndexerModels(out *jwriter.Writer, in Stash) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"accountName\":"
		out.RawString(prefix[1:])
		out.String(string(in.AccountName))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"items\":"
		out.RawString(prefix)
		if in.Items == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Items {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"lastCharacterName\":"
		out.RawString(prefix)
		out.String(string(in.LastCharacterName))
	}
	{
		const prefix string = ",\"league\":"
		out.RawString(prefix)
		out.String(string(in.League))
	}
	{
		const prefix string = ",\"public\":"
		out.RawString(prefix)
		out.Bool(bool(in.Public))
	}
	{
		const prefix string = ",\"stash\":"
		out.RawString(prefix)
		out.String(string(in.Stash))
	}
	{
		const prefix string = ",\"stashType\":"
		out.RawString(prefix)
		out.String(string(in.StashType))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Stash) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeDrhyuComIndexerModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Stash) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeDrhyuComIndexerModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Stash) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeDrhyuComIndexerModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Stash) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeDrhyuComIndexerModels(l, v)
}
func easyjsonD2b7633eDecodeDrhyuComIndexerModels1(in *jlexer.Lexer, out *RespStruct) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "next_change_id":
			out.NextChangeID = string(in.String())
		case "stashes":
			if in.IsNull() {
				in.Skip()
				out.Stashes = nil
			} else {
				in.Delim('[')
				if out.Stashes == nil {
					if !in.IsDelim(']') {
						out.Stashes = make([]Stash, 0, 0)
					} else {
						out.Stashes = []Stash{}
					}
				} else {
					out.Stashes = (out.Stashes)[:0]
				}
				for !in.IsDelim(']') {
					var v4 Stash
					(v4).UnmarshalEasyJSON(in)
					out.Stashes = append(out.Stashes, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeDrhyuComIndexerModels1(out *jwriter.Writer, in RespStruct) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"next_change_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.NextChangeID))
	}
	{
		const prefix string = ",\"stashes\":"
		out.RawString(prefix)
		if in.Stashes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Stashes {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RespStruct) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeDrhyuComIndexerModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RespStruct) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeDrhyuComIndexerModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RespStruct) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeDrhyuComIndexerModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RespStruct) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeDrhyuComIndexerModels1(l, v)
}
func easyjsonD2b7633eDecodeDrhyuComIndexerModels2(in *jlexer.Lexer, out *Item) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "baseType":
			out.BaseType = string(in.String())
		case "explicitMods":
			if in.IsNull() {
				in.Skip()
				out.ExplicitMods = nil
			} else {
				in.Delim('[')
				if out.ExplicitMods == nil {
					if !in.IsDelim(']') {
						out.ExplicitMods = make([]string, 0, 4)
					} else {
						out.ExplicitMods = []string{}
					}
				} else {
					out.ExplicitMods = (out.ExplicitMods)[:0]
				}
				for !in.IsDelim(']') {
					var v7 string
					v7 = string(in.String())
					out.ExplicitMods = append(out.ExplicitMods, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "frameType":
			out.FrameType = int(in.Int())
		case "h":
			out.H = int(in.Int())
		case "icon":
			out.Icon = string(in.String())
		case "id":
			out.ID = string(in.String())
		case "identified":
			out.Identified = bool(in.Bool())
		case "ilvl":
			out.Ilvl = int(in.Int())
		case "implicitMods":
			if in.IsNull() {
				in.Skip()
				out.ImplicitMods = nil
			} else {
				in.Delim('[')
				if out.ImplicitMods == nil {
					if !in.IsDelim(']') {
						out.ImplicitMods = make([]string, 0, 4)
					} else {
						out.ImplicitMods = []string{}
					}
				} else {
					out.ImplicitMods = (out.ImplicitMods)[:0]
				}
				for !in.IsDelim(']') {
					var v8 string
					v8 = string(in.String())
					out.ImplicitMods = append(out.ImplicitMods, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "inventoryId":
			out.InventoryID = string(in.String())
		case "league":
			out.League = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "extended":
			easyjsonD2b7633eDecode(in, &out.Extended)
		case "requirements":
			if in.IsNull() {
				in.Skip()
				out.Requirements = nil
			} else {
				in.Delim('[')
				if out.Requirements == nil {
					if !in.IsDelim(']') {
						out.Requirements = make([]struct {
							DisplayMode int             `json:"displayMode"`
							Name        string          `json:"name"`
							Values      [][]interface{} `json:"values"`
						}, 0, 1)
					} else {
						out.Requirements = []struct {
							DisplayMode int             `json:"displayMode"`
							Name        string          `json:"name"`
							Values      [][]interface{} `json:"values"`
						}{}
					}
				} else {
					out.Requirements = (out.Requirements)[:0]
				}
				for !in.IsDelim(']') {
					var v9 struct {
						DisplayMode int             `json:"displayMode"`
						Name        string          `json:"name"`
						Values      [][]interface{} `json:"values"`
					}
					easyjsonD2b7633eDecode1(in, &v9)
					out.Requirements = append(out.Requirements, v9)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "typeLine":
			out.TypeLine = string(in.String())
		case "verified":
			out.Verified = bool(in.Bool())
		case "w":
			out.W = int(in.Int())
		case "x":
			out.X = int(in.Int())
		case "y":
			out.Y = int(in.Int())
		case "flavourText":
			if in.IsNull() {
				in.Skip()
				out.FlavourText = nil
			} else {
				in.Delim('[')
				if out.FlavourText == nil {
					if !in.IsDelim(']') {
						out.FlavourText = make([]string, 0, 4)
					} else {
						out.FlavourText = []string{}
					}
				} else {
					out.FlavourText = (out.FlavourText)[:0]
				}
				for !in.IsDelim(']') {
					var v10 string
					v10 = string(in.String())
					out.FlavourText = append(out.FlavourText, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "properties":
			if in.IsNull() {
				in.Skip()
				out.Properties = nil
			} else {
				in.Delim('[')
				if out.Properties == nil {
					if !in.IsDelim(']') {
						out.Properties = make([]struct {
							DisplayMode int             `json:"displayMode"`
							Name        string          `json:"name"`
							Type        int             `json:"type"`
							Values      [][]interface{} `json:"values"`
						}, 0, 1)
					} else {
						out.Properties = []struct {
							DisplayMode int             `json:"displayMode"`
							Name        string          `json:"name"`
							Type        int             `json:"type"`
							Values      [][]interface{} `json:"values"`
						}{}
					}
				} else {
					out.Properties = (out.Properties)[:0]
				}
				for !in.IsDelim(']') {
					var v11 struct {
						DisplayMode int             `json:"displayMode"`
						Name        string          `json:"name"`
						Type        int             `json:"type"`
						Values      [][]interface{} `json:"values"`
					}
					easyjsonD2b7633eDecode2(in, &v11)
					out.Properties = append(out.Properties, v11)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "socketedItems":
			if in.IsNull() {
				in.Skip()
				out.SocketedItems = nil
			} else {
				in.Delim('[')
				if out.SocketedItems == nil {
					if !in.IsDelim(']') {
						out.SocketedItems = make([]interface{}, 0, 4)
					} else {
						out.SocketedItems = []interface{}{}
					}
				} else {
					out.SocketedItems = (out.SocketedItems)[:0]
				}
				for !in.IsDelim(']') {
					var v12 interface{}
					if m, ok := v12.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v12.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v12 = in.Interface()
					}
					out.SocketedItems = append(out.SocketedItems, v12)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "sockets":
			if in.IsNull() {
				in.Skip()
				out.Sockets = nil
			} else {
				in.Delim('[')
				if out.Sockets == nil {
					if !in.IsDelim(']') {
						out.Sockets = make([]struct {
							Attr    string `json:"attr"`
							Group   int    `json:"group"`
							SColour string `json:"sColour"`
						}, 0, 1)
					} else {
						out.Sockets = []struct {
							Attr    string `json:"attr"`
							Group   int    `json:"group"`
							SColour string `json:"sColour"`
						}{}
					}
				} else {
					out.Sockets = (out.Sockets)[:0]
				}
				for !in.IsDelim(']') {
					var v13 struct {
						Attr    string `json:"attr"`
						Group   int    `json:"group"`
						SColour string `json:"sColour"`
					}
					easyjsonD2b7633eDecode3(in, &v13)
					out.Sockets = append(out.Sockets, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "corrupted":
			out.Corrupted = bool(in.Bool())
		case "talismanTier":
			out.TalismanTier = int(in.Int())
		case "descrText":
			out.DescrText = string(in.String())
		case "utilityMods":
			if in.IsNull() {
				in.Skip()
				out.UtilityMods = nil
			} else {
				in.Delim('[')
				if out.UtilityMods == nil {
					if !in.IsDelim(']') {
						out.UtilityMods = make([]string, 0, 4)
					} else {
						out.UtilityMods = []string{}
					}
				} else {
					out.UtilityMods = (out.UtilityMods)[:0]
				}
				for !in.IsDelim(']') {
					var v14 string
					v14 = string(in.String())
					out.UtilityMods = append(out.UtilityMods, v14)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "craftedMods":
			if in.IsNull() {
				in.Skip()
				out.CraftedMods = nil
			} else {
				in.Delim('[')
				if out.CraftedMods == nil {
					if !in.IsDelim(']') {
						out.CraftedMods = make([]string, 0, 4)
					} else {
						out.CraftedMods = []string{}
					}
				} else {
					out.CraftedMods = (out.CraftedMods)[:0]
				}
				for !in.IsDelim(']') {
					var v15 string
					v15 = string(in.String())
					out.CraftedMods = append(out.CraftedMods, v15)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "enchantMods":
			if in.IsNull() {
				in.Skip()
				out.EnchantMods = nil
			} else {
				in.Delim('[')
				if out.EnchantMods == nil {
					if !in.IsDelim(']') {
						out.EnchantMods = make([]string, 0, 4)
					} else {
						out.EnchantMods = []string{}
					}
				} else {
					out.EnchantMods = (out.EnchantMods)[:0]
				}
				for !in.IsDelim(']') {
					var v16 string
					v16 = string(in.String())
					out.EnchantMods = append(out.EnchantMods, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "note":
			out.Note = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeDrhyuComIndexerModels2(out *jwriter.Writer, in Item) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"baseType\":"
		out.RawString(prefix[1:])
		out.String(string(in.BaseType))
	}
	if len(in.ExplicitMods) != 0 {
		const prefix string = ",\"explicitMods\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v17, v18 := range in.ExplicitMods {
				if v17 > 0 {
					out.RawByte(',')
				}
				out.String(string(v18))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"frameType\":"
		out.RawString(prefix)
		out.Int(int(in.FrameType))
	}
	{
		const prefix string = ",\"h\":"
		out.RawString(prefix)
		out.Int(int(in.H))
	}
	{
		const prefix string = ",\"icon\":"
		out.RawString(prefix)
		out.String(string(in.Icon))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"identified\":"
		out.RawString(prefix)
		out.Bool(bool(in.Identified))
	}
	{
		const prefix string = ",\"ilvl\":"
		out.RawString(prefix)
		out.Int(int(in.Ilvl))
	}
	if len(in.ImplicitMods) != 0 {
		const prefix string = ",\"implicitMods\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v19, v20 := range in.ImplicitMods {
				if v19 > 0 {
					out.RawByte(',')
				}
				out.String(string(v20))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"inventoryId\":"
		out.RawString(prefix)
		out.String(string(in.InventoryID))
	}
	{
		const prefix string = ",\"league\":"
		out.RawString(prefix)
		out.String(string(in.League))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	if true {
		const prefix string = ",\"extended\":"
		out.RawString(prefix)
		easyjsonD2b7633eEncode(out, in.Extended)
	}
	if len(in.Requirements) != 0 {
		const prefix string = ",\"requirements\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v21, v22 := range in.Requirements {
				if v21 > 0 {
					out.RawByte(',')
				}
				easyjsonD2b7633eEncode1(out, v22)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"typeLine\":"
		out.RawString(prefix)
		out.String(string(in.TypeLine))
	}
	{
		const prefix string = ",\"verified\":"
		out.RawString(prefix)
		out.Bool(bool(in.Verified))
	}
	{
		const prefix string = ",\"w\":"
		out.RawString(prefix)
		out.Int(int(in.W))
	}
	{
		const prefix string = ",\"x\":"
		out.RawString(prefix)
		out.Int(int(in.X))
	}
	{
		const prefix string = ",\"y\":"
		out.RawString(prefix)
		out.Int(int(in.Y))
	}
	if len(in.FlavourText) != 0 {
		const prefix string = ",\"flavourText\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v23, v24 := range in.FlavourText {
				if v23 > 0 {
					out.RawByte(',')
				}
				out.String(string(v24))
			}
			out.RawByte(']')
		}
	}
	if len(in.Properties) != 0 {
		const prefix string = ",\"properties\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v25, v26 := range in.Properties {
				if v25 > 0 {
					out.RawByte(',')
				}
				easyjsonD2b7633eEncode2(out, v26)
			}
			out.RawByte(']')
		}
	}
	if len(in.SocketedItems) != 0 {
		const prefix string = ",\"socketedItems\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v27, v28 := range in.SocketedItems {
				if v27 > 0 {
					out.RawByte(',')
				}
				if m, ok := v28.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v28.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v28))
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.Sockets) != 0 {
		const prefix string = ",\"sockets\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v29, v30 := range in.Sockets {
				if v29 > 0 {
					out.RawByte(',')
				}
				easyjsonD2b7633eEncode3(out, v30)
			}
			out.RawByte(']')
		}
	}
	if in.Corrupted {
		const prefix string = ",\"corrupted\":"
		out.RawString(prefix)
		out.Bool(bool(in.Corrupted))
	}
	if in.TalismanTier != 0 {
		const prefix string = ",\"talismanTier\":"
		out.RawString(prefix)
		out.Int(int(in.TalismanTier))
	}
	if in.DescrText != "" {
		const prefix string = ",\"descrText\":"
		out.RawString(prefix)
		out.String(string(in.DescrText))
	}
	if len(in.UtilityMods) != 0 {
		const prefix string = ",\"utilityMods\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v31, v32 := range in.UtilityMods {
				if v31 > 0 {
					out.RawByte(',')
				}
				out.String(string(v32))
			}
			out.RawByte(']')
		}
	}
	if len(in.CraftedMods) != 0 {
		const prefix string = ",\"craftedMods\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v33, v34 := range in.CraftedMods {
				if v33 > 0 {
					out.RawByte(',')
				}
				out.String(string(v34))
			}
			out.RawByte(']')
		}
	}
	if len(in.EnchantMods) != 0 {
		const prefix string = ",\"enchantMods\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v35, v36 := range in.EnchantMods {
				if v35 > 0 {
					out.RawByte(',')
				}
				out.String(string(v36))
			}
			out.RawByte(']')
		}
	}
	if in.Note != "" {
		const prefix string = ",\"note\":"
		out.RawString(prefix)
		out.String(string(in.Note))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Item) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeDrhyuComIndexerModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Item) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeDrhyuComIndexerModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Item) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeDrhyuComIndexerModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Item) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeDrhyuComIndexerModels2(l, v)
}
func easyjsonD2b7633eDecode3(in *jlexer.Lexer, out *struct {
	Attr    string `json:"attr"`
	Group   int    `json:"group"`
	SColour string `json:"sColour"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "attr":
			out.Attr = string(in.String())
		case "group":
			out.Group = int(in.Int())
		case "sColour":
			out.SColour = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode3(out *jwriter.Writer, in struct {
	Attr    string `json:"attr"`
	Group   int    `json:"group"`
	SColour string `json:"sColour"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"attr\":"
		out.RawString(prefix[1:])
		out.String(string(in.Attr))
	}
	{
		const prefix string = ",\"group\":"
		out.RawString(prefix)
		out.Int(int(in.Group))
	}
	{
		const prefix string = ",\"sColour\":"
		out.RawString(prefix)
		out.String(string(in.SColour))
	}
	out.RawByte('}')
}
func easyjsonD2b7633eDecode2(in *jlexer.Lexer, out *struct {
	DisplayMode int             `json:"displayMode"`
	Name        string          `json:"name"`
	Type        int             `json:"type"`
	Values      [][]interface{} `json:"values"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "displayMode":
			out.DisplayMode = int(in.Int())
		case "name":
			out.Name = string(in.String())
		case "type":
			out.Type = int(in.Int())
		case "values":
			if in.IsNull() {
				in.Skip()
				out.Values = nil
			} else {
				in.Delim('[')
				if out.Values == nil {
					if !in.IsDelim(']') {
						out.Values = make([][]interface{}, 0, 2)
					} else {
						out.Values = [][]interface{}{}
					}
				} else {
					out.Values = (out.Values)[:0]
				}
				for !in.IsDelim(']') {
					var v37 []interface{}
					if in.IsNull() {
						in.Skip()
						v37 = nil
					} else {
						in.Delim('[')
						if v37 == nil {
							if !in.IsDelim(']') {
								v37 = make([]interface{}, 0, 4)
							} else {
								v37 = []interface{}{}
							}
						} else {
							v37 = (v37)[:0]
						}
						for !in.IsDelim(']') {
							var v38 interface{}
							if m, ok := v38.(easyjson.Unmarshaler); ok {
								m.UnmarshalEasyJSON(in)
							} else if m, ok := v38.(json.Unmarshaler); ok {
								_ = m.UnmarshalJSON(in.Raw())
							} else {
								v38 = in.Interface()
							}
							v37 = append(v37, v38)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.Values = append(out.Values, v37)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode2(out *jwriter.Writer, in struct {
	DisplayMode int             `json:"displayMode"`
	Name        string          `json:"name"`
	Type        int             `json:"type"`
	Values      [][]interface{} `json:"values"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"displayMode\":"
		out.RawString(prefix[1:])
		out.Int(int(in.DisplayMode))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.Int(int(in.Type))
	}
	{
		const prefix string = ",\"values\":"
		out.RawString(prefix)
		if in.Values == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v39, v40 := range in.Values {
				if v39 > 0 {
					out.RawByte(',')
				}
				if v40 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v41, v42 := range v40 {
						if v41 > 0 {
							out.RawByte(',')
						}
						if m, ok := v42.(easyjson.Marshaler); ok {
							m.MarshalEasyJSON(out)
						} else if m, ok := v42.(json.Marshaler); ok {
							out.Raw(m.MarshalJSON())
						} else {
							out.Raw(json.Marshal(v42))
						}
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjsonD2b7633eDecode1(in *jlexer.Lexer, out *struct {
	DisplayMode int             `json:"displayMode"`
	Name        string          `json:"name"`
	Values      [][]interface{} `json:"values"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "displayMode":
			out.DisplayMode = int(in.Int())
		case "name":
			out.Name = string(in.String())
		case "values":
			if in.IsNull() {
				in.Skip()
				out.Values = nil
			} else {
				in.Delim('[')
				if out.Values == nil {
					if !in.IsDelim(']') {
						out.Values = make([][]interface{}, 0, 2)
					} else {
						out.Values = [][]interface{}{}
					}
				} else {
					out.Values = (out.Values)[:0]
				}
				for !in.IsDelim(']') {
					var v43 []interface{}
					if in.IsNull() {
						in.Skip()
						v43 = nil
					} else {
						in.Delim('[')
						if v43 == nil {
							if !in.IsDelim(']') {
								v43 = make([]interface{}, 0, 4)
							} else {
								v43 = []interface{}{}
							}
						} else {
							v43 = (v43)[:0]
						}
						for !in.IsDelim(']') {
							var v44 interface{}
							if m, ok := v44.(easyjson.Unmarshaler); ok {
								m.UnmarshalEasyJSON(in)
							} else if m, ok := v44.(json.Unmarshaler); ok {
								_ = m.UnmarshalJSON(in.Raw())
							} else {
								v44 = in.Interface()
							}
							v43 = append(v43, v44)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.Values = append(out.Values, v43)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode1(out *jwriter.Writer, in struct {
	DisplayMode int             `json:"displayMode"`
	Name        string          `json:"name"`
	Values      [][]interface{} `json:"values"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"displayMode\":"
		out.RawString(prefix[1:])
		out.Int(int(in.DisplayMode))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"values\":"
		out.RawString(prefix)
		if in.Values == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v45, v46 := range in.Values {
				if v45 > 0 {
					out.RawByte(',')
				}
				if v46 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v47, v48 := range v46 {
						if v47 > 0 {
							out.RawByte(',')
						}
						if m, ok := v48.(easyjson.Marshaler); ok {
							m.MarshalEasyJSON(out)
						} else if m, ok := v48.(json.Marshaler); ok {
							out.Raw(m.MarshalJSON())
						} else {
							out.Raw(json.Marshal(v48))
						}
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjsonD2b7633eDecode(in *jlexer.Lexer, out *struct {
	BaseType      string   `json:"baseType"`
	Category      string   `json:"category"`
	Prefixes      int      `json:"prefixes"`
	Subcategories []string `json:"subcategories"`
	Suffixes      int      `json:"suffixes"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "baseType":
			out.BaseType = string(in.String())
		case "category":
			out.Category = string(in.String())
		case "prefixes":
			out.Prefixes = int(in.Int())
		case "subcategories":
			if in.IsNull() {
				in.Skip()
				out.Subcategories = nil
			} else {
				in.Delim('[')
				if out.Subcategories == nil {
					if !in.IsDelim(']') {
						out.Subcategories = make([]string, 0, 4)
					} else {
						out.Subcategories = []string{}
					}
				} else {
					out.Subcategories = (out.Subcategories)[:0]
				}
				for !in.IsDelim(']') {
					var v49 string
					v49 = string(in.String())
					out.Subcategories = append(out.Subcategories, v49)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "suffixes":
			out.Suffixes = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode(out *jwriter.Writer, in struct {
	BaseType      string   `json:"baseType"`
	Category      string   `json:"category"`
	Prefixes      int      `json:"prefixes"`
	Subcategories []string `json:"subcategories"`
	Suffixes      int      `json:"suffixes"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"baseType\":"
		out.RawString(prefix[1:])
		out.String(string(in.BaseType))
	}
	{
		const prefix string = ",\"category\":"
		out.RawString(prefix)
		out.String(string(in.Category))
	}
	{
		const prefix string = ",\"prefixes\":"
		out.RawString(prefix)
		out.Int(int(in.Prefixes))
	}
	{
		const prefix string = ",\"subcategories\":"
		out.RawString(prefix)
		if in.Subcategories == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v50, v51 := range in.Subcategories {
				if v50 > 0 {
					out.RawByte(',')
				}
				out.String(string(v51))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"suffixes\":"
		out.RawString(prefix)
		out.Int(int(in.Suffixes))
	}
	out.RawByte('}')
}
